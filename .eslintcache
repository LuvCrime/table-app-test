[{"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\index.js":"1","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\App.js":"2","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\reportWebVitals.js":"3","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Table\\TableApp.js":"4","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Store.js":"5","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Reducer.js":"6","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Actions.js":"7","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\OnBoarding\\OnBoarding.js":"8"},{"size":626,"mtime":1607691968486,"results":"9","hashOfConfig":"10"},{"size":566,"mtime":1607781297583,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":16540,"mtime":1607781753364,"results":"13","hashOfConfig":"10"},{"size":116,"mtime":1607520380007,"results":"14","hashOfConfig":"10"},{"size":466,"mtime":1607780644393,"results":"15","hashOfConfig":"10"},{"size":671,"mtime":1607780806199,"results":"16","hashOfConfig":"10"},{"size":1114,"mtime":1607781488753,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"9fupqb",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\index.js",[],["36","37"],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\App.js",[],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\reportWebVitals.js",[],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Table\\TableApp.js",["38"],"import Table from \"react-bootstrap/Table\";\r\nimport React from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { addData } from \"../Redux/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport autoBind from \"react-autobind\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst ROWS_PER_PAGE = 50;\r\n\r\nclass TableApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isClicked: false,\r\n      id: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      pageNumber: 1,\r\n      loading: true,\r\n      sortedRows: \"\",\r\n      asc: true,\r\n      searchingVal: \"\",\r\n      searchMode: false,\r\n      inputVal: \"\",\r\n      userInfo: \"\",\r\n    };\r\n    autoBind(this);\r\n  }\r\n\r\n  onUserInfoButton(userInfo) {\r\n    this.setState({\r\n      userInfo: userInfo,\r\n    });\r\n    console.log(\r\n      \"---\",\r\n      userInfo.address.streetAddress,\r\n      \"---\",\r\n      \"----\",\r\n      userInfo.address.city,\r\n      \"----\",\r\n      userInfo.address.state,\r\n      \"----\",\r\n      userInfo.address.zip\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dataUrl =\r\n  `http://www.filltext.com/?rows=${this.props.dataAmount}&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`;\r\n    fetch(dataUrl)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        data.forEach((user) => {\r\n          this.props.addData(\r\n            user.id,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phone,\r\n            user.address,\r\n            user.description\r\n          );\r\n        });\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  onSearchButon() {\r\n    if (this.state.searchMode === false) {\r\n      this.setState({\r\n        searchMode: true,\r\n        searchingVal: this.state.inputVal,\r\n        inputVal: \"\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        searchMode: false,\r\n        searchingVal: this.state.inputVal,\r\n        inputVal: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  onSortButton(fieldName) {\r\n    if (this.state.sortedRows === fieldName) {\r\n      if (this.state.asc === true) {\r\n        this.setState({\r\n          asc: false,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          asc: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        sortedRows: fieldName,\r\n        asc: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  addForm() {\r\n    if (this.state.isClicked === false) {\r\n      this.setState({\r\n        isClicked: true,\r\n      });\r\n    } else if (\r\n      this.state.firstName === \"\" ||\r\n      this.state.lastName === \"\" ||\r\n      this.state.email === \"\" ||\r\n      this.state.phone === \"\"\r\n    ) {\r\n      alert(\"All form fields should be filled\");\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        isClicked: false,\r\n      });\r\n      this.props.addData(\r\n        null,\r\n        this.state.firstName,\r\n        this.state.lastName,\r\n        this.state.email,\r\n        this.state.phone\r\n      );\r\n    }\r\n    this.setState({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n    });\r\n  }\r\n\r\n  onFormOnChange(e) {\r\n    let name = e.target.name;\r\n    this.setState({\r\n      [name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  onActiveButton(number) {\r\n    this.setState({\r\n      pageNumber: number,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.userInfo);\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className={styles.divLoader}>\r\n          <Loader\r\n            type=\"Circles\"\r\n            color=\"#007bff\"\r\n            height={80}\r\n            width={80}\r\n            timeout={3000}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    let usersCount = this.props.data.length;\r\n    let pages = Math.ceil(usersCount / ROWS_PER_PAGE);\r\n    let currentPage = this.state.pageNumber;\r\n    let firstIndex = ROWS_PER_PAGE * (currentPage - 1);\r\n    let lastIndex = ROWS_PER_PAGE * currentPage;\r\n    let items = [];\r\n    for (let number = 1; number <= pages; number++) {\r\n      items.push(\r\n        <Pagination.Item\r\n          key={number}\r\n          active={number === currentPage}\r\n          onClick={(e) => this.onActiveButton(number)}\r\n        >\r\n          {number}\r\n        </Pagination.Item>\r\n      );\r\n    }\r\n\r\n    const filteredUsers = this.props.data\r\n      .filter((user) => {\r\n        if (this.state.searchingVal === \"\") {\r\n          return;\r\n        }\r\n        if (this.state.searchMode === true || this.state.searchMode === false) {\r\n          if (\r\n            user.firstName\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (\r\n            user.lastName\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (\r\n            user.email\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (user.phone.includes(this.state.searchingVal)) {\r\n            return true;\r\n          } else if (user.id.toString() === this.state.searchingVal) {\r\n            return true;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n        return false;\r\n      })\r\n      .map((searchedUser) => {\r\n        return (\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>id</th>\r\n                <th>firstName</th>\r\n                <th>lastName</th>\r\n                <th>email</th>\r\n                <th>phone</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{searchedUser.id}</td>\r\n                <td>{searchedUser.firstName}</td>\r\n                <td>{searchedUser.lastName}</td>\r\n                <td>{searchedUser.email}</td>\r\n                <td>{searchedUser.phone}</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        );\r\n      });\r\n\r\n    const dataUsers = this.props.data\r\n      .sort((a, b) => {\r\n        if (this.state.asc === true) {\r\n          if (typeof a[this.state.sortedRows] === \"string\") {\r\n            return a[this.state.sortedRows].localeCompare(\r\n              b[this.state.sortedRows]\r\n            );\r\n          } else {\r\n            return a[this.state.sortedRows] - b[this.state.sortedRows];\r\n          }\r\n        } else {\r\n          if (typeof a[this.state.sortedRows] === \"string\") {\r\n            return b[this.state.sortedRows].localeCompare(\r\n              a[this.state.sortedRows]\r\n            );\r\n          } else {\r\n            return b[this.state.sortedRows] - a[this.state.sortedRows];\r\n          }\r\n        }\r\n      })\r\n      .slice(firstIndex, lastIndex)\r\n      .map((data) => {\r\n        return (\r\n          <tr onClick={() => this.onUserInfoButton(data)}>\r\n            <td>{data.id}</td>\r\n            <td>{data.firstName}</td>\r\n            <td>{data.lastName}</td>\r\n            <td>{data.email}</td>\r\n            <td>{data.phone}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.main}>\r\n          <div className={styles.search}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                aria-label=\"Recipient's username\"\r\n                aria-describedby=\"basic-addon2\"\r\n                name=\"inputVal\"\r\n                onChange={this.onFormOnChange}\r\n                value={this.state.inputVal}\r\n                autoComplete=\"off\"\r\n              />\r\n              <InputGroup.Append>\r\n                <Button variant=\"primary\" onClick={this.onSearchButon}>\r\n                  Search\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            <div className={styles.searchTable}>{filteredUsers}</div>\r\n          </div>\r\n          {this.state.isClicked && (\r\n            <div className={styles.form}>\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    firstName\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"firstName\"\r\n                  value={this.state.firstName}\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    lastName\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"lastName\"\r\n                  value={this.state.lastName}\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    email\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"email\"\r\n                  value={this.state.email}\r\n                  autoComplete=\"off\"\r\n                  type=\"email\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    phone\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"phone\"\r\n                  value={this.state.phone}\r\n                  autoComplete=\"off\"\r\n                  type=\"number\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n          )}\r\n          <div className={styles.buttonAdd}>\r\n            <Button variant=\"primary\" onClick={this.addForm}>\r\n              Add User\r\n            </Button>{\" \"}\r\n          </div>\r\n          <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  id\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"id\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"id\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"id\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  firstName\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"firstName\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"firstName\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"firstName\"\r\n                            ? \"black\"\r\n                            : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  lastName\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"lastName\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"lastName\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"lastName\"\r\n                            ? \"black\"\r\n                            : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  email\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"email\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"email\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"email\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  phone\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"phone\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"phone\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"phone\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{dataUsers}</tbody>\r\n          </Table>\r\n          <div className={styles.pagination}>\r\n            <Pagination size=\"sm\">{items}</Pagination>\r\n            </div>\r\n            {this.state.userInfo && (\r\n              <div className={styles.userDescription}>\r\n                <b>User info</b>\r\n                <div>id: {this.state.userInfo.id}</div>\r\n                <div>firstName: {this.state.userInfo.firstName}</div>\r\n                <div>lastName: {this.state.userInfo.lastName}</div>\r\n                <div>email: {this.state.userInfo.email}</div>\r\n                <div>phone: {this.state.userInfo.phone}</div>\r\n                <div>address: {this.state.userInfo.address.streetAddress}</div>\r\n                <div>streetAddress: {this.state.userInfo.address.city}</div>\r\n                <div>city: {this.state.userInfo.address.state}</div>\r\n                <div>zip: {this.state.userInfo.address.zip}</div>\r\n                <div>description: {this.state.userInfo.description}</div>\r\n              </div>\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return state;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addData: addData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableApp);\r\n","C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Store.js",[],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Reducer.js",[],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\Redux\\Actions.js",[],"C:\\Users\\Анатолий\\Desktop\\table-app\\src\\OnBoarding\\OnBoarding.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":198,"column":11,"nodeType":"45","messageId":"46","endLine":198,"endColumn":18},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]