{"version":3,"sources":["OnBoarding/styles.module.css","Table/styles.module.css","Redux/Actions.js","OnBoarding/OnBoarding.js","Table/TableApp.js","App.js","reportWebVitals.js","Redux/Reducer.js","Redux/Store.js","index.js"],"names":["module","exports","nextId","OnBoarding","props","autoBind","number","this","setDataAmount","className","styles","wrapper","format","buttons","Button","variant","onClick","chooseAmount","React","Component","mapDispatchToProps","type","payload","connect","state","TableApp","isClicked","id","firstName","lastName","email","phone","pageNumber","loading","sortedRows","asc","searchingVal","searchMode","inputVal","userInfo","setState","console","log","address","streetAddress","city","zip","dataUrl","dataAmount","fetch","then","response","json","data","forEach","user","addData","description","fieldName","alert","e","name","target","value","divLoader","color","height","width","timeout","usersCount","length","pages","Math","ceil","currentPage","firstIndex","lastIndex","items","push","Pagination","Item","active","onActiveButton","filteredUsers","filter","toLowerCase","includes","toString","map","searchedUser","Table","striped","bordered","hover","dataUsers","sort","a","b","localeCompare","slice","onUserInfoButton","main","search","InputGroup","FormControl","aria-label","aria-describedby","onChange","onFormOnChange","autoComplete","Append","onSearchButon","searchTable","form","size","Prepend","Text","buttonAdd","addForm","icon","faSortUp","onSortButton","style","transform","pagination","userDescription","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","update","$push","$set","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2eeed200.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__1jEKX\",\"format\":\"styles_format__Aoeq9\",\"buttons\":\"styles_buttons__1WE3j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__1O7g_\",\"wrapper\":\"styles_wrapper__1g9k4\",\"sort\":\"styles_sort__zZqs3\",\"buttonAdd\":\"styles_buttonAdd__2b1ZA\",\"addUserForm\":\"styles_addUserForm__11tVX\",\"form\":\"styles_form__1JHNa\",\"arrows\":\"styles_arrows__3xayG\",\"svgLoader\":\"styles_svgLoader__2GnhS\",\"spin\":\"styles_spin__I9jZk\",\"divLoader\":\"styles_divLoader__3ktK-\",\"search\":\"styles_search__3ocir\",\"userDescription\":\"styles_userDescription__2kAUn\",\"pagination\":\"styles_pagination__y446u\"};","let nextId = 0;\r\n\r\nexport const addData = (id, firstName, lastName, email, phone, address, description) => {\r\n  if (id === null) {\r\n    return {\r\n      type: \"ADD_DATA\",\r\n      payload: {\r\n        id: ++nextId,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        phone, \r\n        address,\r\n        description\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      type: \"ADD_DATA\",\r\n      payload: {\r\n        id,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        phone,\r\n        address,\r\n        description\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\nexport const setDataAmount = (number) => {\r\n  return {\r\n    type: \"DATA_AMOUNT\",\r\n    payload: number\r\n  }\r\n}","import React from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { setDataAmount } from \"../Redux/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport autoBind from \"react-autobind\";\r\n\r\nexport class OnBoarding extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    autoBind(this);\r\n  }\r\n\r\n  chooseAmount(number) {\r\n      this.props.setDataAmount(number)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.format}>Select data amount:</div>\r\n        <div className={styles.buttons}>\r\n          <Button variant=\"primary\"\r\n          onClick={()=>this.chooseAmount(32)}>Small amount</Button>{\" \"}\r\n          <Button variant=\"primary\"\r\n           onClick={()=>this.chooseAmount(1000)}>Huge amount</Button>{\" \"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return null;\r\n  };\r\n  \r\n  const mapDispatchToProps = {\r\n    setDataAmount: setDataAmount,\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(OnBoarding);","import Table from \"react-bootstrap/Table\";\r\nimport React from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { addData } from \"../Redux/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport autoBind from \"react-autobind\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst ROWS_PER_PAGE = 50;\r\n\r\nclass TableApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isClicked: false,\r\n      id: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      pageNumber: 1,\r\n      loading: true,\r\n      sortedRows: \"\",\r\n      asc: true,\r\n      searchingVal: \"\",\r\n      searchMode: false,\r\n      inputVal: \"\",\r\n      userInfo: \"\",\r\n    };\r\n    autoBind(this);\r\n  }\r\n\r\n  onUserInfoButton(userInfo) {\r\n    this.setState({\r\n      userInfo: userInfo,\r\n    });\r\n    console.log(\r\n      \"---\",\r\n      userInfo.address.streetAddress,\r\n      \"---\",\r\n      \"----\",\r\n      userInfo.address.city,\r\n      \"----\",\r\n      userInfo.address.state,\r\n      \"----\",\r\n      userInfo.address.zip\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dataUrl =\r\n  `http://www.filltext.com/?rows=${this.props.dataAmount}&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`;\r\n    fetch(dataUrl)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        data.forEach((user) => {\r\n          this.props.addData(\r\n            user.id,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phone,\r\n            user.address,\r\n            user.description\r\n          );\r\n        });\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  onSearchButon() {\r\n    if (this.state.searchMode === false) {\r\n      this.setState({\r\n        searchMode: true,\r\n        searchingVal: this.state.inputVal,\r\n        inputVal: \"\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        searchMode: false,\r\n        searchingVal: this.state.inputVal,\r\n        inputVal: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  onSortButton(fieldName) {\r\n    if (this.state.sortedRows === fieldName) {\r\n      if (this.state.asc === true) {\r\n        this.setState({\r\n          asc: false,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          asc: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        sortedRows: fieldName,\r\n        asc: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  addForm() {\r\n    if (this.state.isClicked === false) {\r\n      this.setState({\r\n        isClicked: true,\r\n      });\r\n    } else if (\r\n      this.state.firstName === \"\" ||\r\n      this.state.lastName === \"\" ||\r\n      this.state.email === \"\" ||\r\n      this.state.phone === \"\"\r\n    ) {\r\n      alert(\"All form fields should be filled\");\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        isClicked: false,\r\n      });\r\n      this.props.addData(\r\n        null,\r\n        this.state.firstName,\r\n        this.state.lastName,\r\n        this.state.email,\r\n        this.state.phone\r\n      );\r\n    }\r\n    this.setState({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n    });\r\n  }\r\n\r\n  onFormOnChange(e) {\r\n    let name = e.target.name;\r\n    this.setState({\r\n      [name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  onActiveButton(number) {\r\n    this.setState({\r\n      pageNumber: number,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.userInfo);\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className={styles.divLoader}>\r\n          <Loader\r\n            type=\"Circles\"\r\n            color=\"#007bff\"\r\n            height={80}\r\n            width={80}\r\n            timeout={3000}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    let usersCount = this.props.data.length;\r\n    let pages = Math.ceil(usersCount / ROWS_PER_PAGE);\r\n    let currentPage = this.state.pageNumber;\r\n    let firstIndex = ROWS_PER_PAGE * (currentPage - 1);\r\n    let lastIndex = ROWS_PER_PAGE * currentPage;\r\n    let items = [];\r\n    for (let number = 1; number <= pages; number++) {\r\n      items.push(\r\n        <Pagination.Item\r\n          key={number}\r\n          active={number === currentPage}\r\n          onClick={(e) => this.onActiveButton(number)}\r\n        >\r\n          {number}\r\n        </Pagination.Item>\r\n      );\r\n    }\r\n\r\n    const filteredUsers = this.props.data\r\n      .filter((user) => {\r\n        if (this.state.searchingVal === \"\") {\r\n          return;\r\n        }\r\n        if (this.state.searchMode === true || this.state.searchMode === false) {\r\n          if (\r\n            user.firstName\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (\r\n            user.lastName\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (\r\n            user.email\r\n              .toLowerCase()\r\n              .includes(this.state.searchingVal.toLowerCase())\r\n          ) {\r\n            return true;\r\n          } else if (user.phone.includes(this.state.searchingVal)) {\r\n            return true;\r\n          } else if (user.id.toString() === this.state.searchingVal) {\r\n            return true;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n        return false;\r\n      })\r\n      .map((searchedUser) => {\r\n        return (\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>id</th>\r\n                <th>firstName</th>\r\n                <th>lastName</th>\r\n                <th>email</th>\r\n                <th>phone</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{searchedUser.id}</td>\r\n                <td>{searchedUser.firstName}</td>\r\n                <td>{searchedUser.lastName}</td>\r\n                <td>{searchedUser.email}</td>\r\n                <td>{searchedUser.phone}</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        );\r\n      });\r\n\r\n    const dataUsers = this.props.data\r\n      .sort((a, b) => {\r\n        if (this.state.asc === true) {\r\n          if (typeof a[this.state.sortedRows] === \"string\") {\r\n            return a[this.state.sortedRows].localeCompare(\r\n              b[this.state.sortedRows]\r\n            );\r\n          } else {\r\n            return a[this.state.sortedRows] - b[this.state.sortedRows];\r\n          }\r\n        } else {\r\n          if (typeof a[this.state.sortedRows] === \"string\") {\r\n            return b[this.state.sortedRows].localeCompare(\r\n              a[this.state.sortedRows]\r\n            );\r\n          } else {\r\n            return b[this.state.sortedRows] - a[this.state.sortedRows];\r\n          }\r\n        }\r\n      })\r\n      .slice(firstIndex, lastIndex)\r\n      .map((data) => {\r\n        return (\r\n          <tr onClick={() => this.onUserInfoButton(data)}>\r\n            <td>{data.id}</td>\r\n            <td>{data.firstName}</td>\r\n            <td>{data.lastName}</td>\r\n            <td>{data.email}</td>\r\n            <td>{data.phone}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.main}>\r\n          <div className={styles.search}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                aria-label=\"Recipient's username\"\r\n                aria-describedby=\"basic-addon2\"\r\n                name=\"inputVal\"\r\n                onChange={this.onFormOnChange}\r\n                value={this.state.inputVal}\r\n                autoComplete=\"off\"\r\n              />\r\n              <InputGroup.Append>\r\n                <Button variant=\"primary\" onClick={this.onSearchButon}>\r\n                  Search\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            <div className={styles.searchTable}>{filteredUsers}</div>\r\n          </div>\r\n          {this.state.isClicked && (\r\n            <div className={styles.form}>\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    firstName\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"firstName\"\r\n                  value={this.state.firstName}\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    lastName\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"lastName\"\r\n                  value={this.state.lastName}\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    email\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"email\"\r\n                  value={this.state.email}\r\n                  autoComplete=\"off\"\r\n                  type=\"email\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n                    phone\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label=\"Small\"\r\n                  aria-describedby=\"inputGroup-sizing-sm\"\r\n                  name=\"phone\"\r\n                  value={this.state.phone}\r\n                  autoComplete=\"off\"\r\n                  type=\"number\"\r\n                  onChange={this.onFormOnChange}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n          )}\r\n          <div className={styles.buttonAdd}>\r\n            <Button variant=\"primary\" onClick={this.addForm}>\r\n              Add User\r\n            </Button>{\" \"}\r\n          </div>\r\n          <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  id\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"id\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"id\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"id\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  firstName\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"firstName\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"firstName\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"firstName\"\r\n                            ? \"black\"\r\n                            : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  lastName\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"lastName\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"lastName\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"lastName\"\r\n                            ? \"black\"\r\n                            : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  email\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"email\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"email\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"email\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  phone\r\n                  <span className={styles.sort}>\r\n                    <FontAwesomeIcon\r\n                      icon={faSortUp}\r\n                      onClick={(e) => this.onSortButton(\"phone\")}\r\n                      style={{\r\n                        transform: `rotate(${\r\n                          this.state.sortedRows === \"phone\" &&\r\n                          this.state.asc === true\r\n                            ? 0\r\n                            : 180\r\n                        }deg)`,\r\n                        color:\r\n                          this.state.sortedRows === \"phone\" ? \"black\" : \"grey\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{dataUsers}</tbody>\r\n          </Table>\r\n          <div className={styles.pagination}>\r\n            <Pagination size=\"sm\">{items}</Pagination>\r\n            </div>\r\n            {this.state.userInfo && (\r\n              <div className={styles.userDescription}>\r\n                <b>User info</b>\r\n                <div>id: {this.state.userInfo.id}</div>\r\n                <div>firstName: {this.state.userInfo.firstName}</div>\r\n                <div>lastName: {this.state.userInfo.lastName}</div>\r\n                <div>email: {this.state.userInfo.email}</div>\r\n                <div>phone: {this.state.userInfo.phone}</div>\r\n                <div>address: {this.state.userInfo.address.streetAddress}</div>\r\n                <div>streetAddress: {this.state.userInfo.address.city}</div>\r\n                <div>city: {this.state.userInfo.address.state}</div>\r\n                <div>zip: {this.state.userInfo.address.zip}</div>\r\n                <div>description: {this.state.userInfo.description}</div>\r\n              </div>\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return state;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addData: addData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableApp);\r\n","import \"./App.css\";\nimport OnBoarding  from \"./OnBoarding/OnBoarding\";\nimport TableApp from \"./Table/TableApp\";\nimport { connect } from \"react-redux\";\n\n\nfunction App(props) {\n  if(props.dataAmount) {\n  return (\n    <div className=\"App\">\n      <TableApp />\n    </div>\n  );\n  } else {\n    return (\n      <div className=\"App\">\n        <OnBoarding />\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    dataAmount: state.dataAmount\n  };\n};\n\nconst mapDispatchToProps = {\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import update from \"immutability-helper\";\r\n\r\nconst initialState = {\r\n  data: [\r\n\r\n  ],\r\n  dataAmount: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_DATA\":\r\n      return update(state, { data: { $push: [action.payload] } });\r\n      case \"DATA_AMOUNT\": \r\n      return update(state, {\r\n        dataAmount: {$set: action.payload}\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from 'redux';\r\nimport reducer from './Reducer'\r\n\r\nexport  let store = createStore(reducer);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}